<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Contents</title>
</head>
<body>
    <partial name="/Views/DevelopmentRabbit/Contents.cshtml" />
    <div>
        <h2> 8. MakeSignUpAndLogin</h2>
    </div>
    <div>
        <div>
            ASP.NET Identity(Security)
            - 사용자 로그인(인증)
            - 사용자 Role(Admin, User, PowerUser)
            - SMS 인증, Email 인증

            - Session 이용한 로그인, 회원가입 구현
            - 로그인 2가지 방법론.
            #1. Session
            - 웹 서버가 사용자 정보를 메모리에 담아놓고 관리
            장점 -> 보안성이 비교적 높다.
            단점 -> 웹 서버 메모리 부하가 높아진다.

            #2. Cookie
            - 웹 서버 로그인 -> 사용자 정보를 브라우저 쿠키로 저장
            장점 -> 웹 서버의 부하가 낮아진다.
            단점 -> 보안성이 비교적 낮다.

            # 결론 : Cookie 많이 씀
            - Cookie 많이 쓰는 이유 -> 암호화 -> 복호화하여 위변조의 위험 존재
            - SSL

            GET :  (Url 자체를 값으로 받아서 사용)
            POST : DB에 전달

            <div>
                <a asp-area="" asp-controller="account" asp-action="login">로그인</a>
                <a asp-area="" asp-controller="account" asp-action="register">회원가입</a>
            </div>
        </div>
    </div>
</body>
</html>



